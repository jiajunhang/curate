[
    {
        "question": "Is Python case sensitive when dealing with identifiers?",
        "options": [
            "yes",
            "no",
            "machine dependent",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: Case is always significant."
    },
    {
        "question": "What is the maximum possible length of an identifier?",
        "options": [
            "31 characters",
            "63 characters",
            "79 characters",
            "none of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: Identifiers can be of any length."
    },
    {
        "question": "Which of the following is invalid?",
        "options": [
            "_a = 1",
            "__a = 1",
            "__str__ = 1",
            "none of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: All the statements will execute successfully but at the cost of reduced readability."
    },
    {
        "question": "Which of the following is an invalid variable?",
        "options": [
            "my_string_1",
            "1st_string",
            "foo",
            "_"
        ],
        "answer": "b",
        "explanation": "Explanation: Variable names should not start with a number."
    },
    {
        "question": "Why are local variable names beginning with an underscore discouraged?",
        "options": [
            "they are used to indicate a private variables of a class",
            "they confuse the interpreter",
            "they are used to indicate global variables",
            "they slow down execution"
        ],
        "answer": "a",
        "explanation": "Explanation: As Python has no concept of private variables, leading underscores are used to indicate variables that must not be accessed from outside the class."
    },
    {
        "question": "Which of the following is not a keyword?",
        "options": [
            "eval",
            "assert",
            "nonlocal",
            "pass"
        ],
        "answer": "a",
        "explanation": "Explanation: eval can be used as a variable."
    },
    {
        "question": "All keywords in Python are in _________",
        "options": [
            "lower case",
            "UPPER CASE",
            "Capitalized",
            "None of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: True, False and None are capitalized while the others are in lower case."
    },
    {
        "question": "Which of the following is true for variable names in Python?",
        "options": [
            "unlimited length",
            "all private members must have leading and trailing underscores",
            "underscore and ampersand are the only two special characters allowed",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: Variable names can be of any length."
    },
    {
        "question": "Which of the following is an invalid statement?",
        "options": [
            "abc = 1,000,000",
            "a b c = 1000 2000 3000",
            "a,b,c = 1000, 2000, 3000",
            "a_b_c = 1,000,000"
        ],
        "answer": "b",
        "explanation": "Explanation: Spaces are not allowed in variable names."
    },
    {
        "question": "Which of the following cannot be a variable?",
        "options": [
            "__init__",
            "in",
            "it",
            "on"
        ],
        "answer": "b",
        "explanation": "Explanation: in is a keyword."
    },
    {
        "question": "Which is the correct operator for power(xy)?",
        "options": [
            "X^y",
            "X**y",
            "X^^y",
            "None of the mentioned"
        ],
        "answer": "b",
        "explanation": "Explanation: In python, power operator is x**y i.e. 2**3=8."
    },
    {
        "question": "Which one of these is floor division?",
        "options": [
            "/",
            "//",
            "%",
            "None of the mentioned"
        ],
        "answer": "b",
        "explanation": "Explanation: When both of the operands are integer then python chops out the fraction part and gives you the round off value, to get the accurate answer use floor division. This is floor division. For ex, 5/2 = 2.5 but both of the operands are integer so answer of this expression in python is 2. To get the 2.5 answer, use floor division."
    },
    {
        "question": "What is the order of precedence in python?",
        "options": [
            "Parentheses",
            "Exponential",
            "Multiplication",
            "Division",
            "Addition",
            "Subtraction",
            "i,ii,iii,iv,v,vi",
            "ii,i,iii,iv,v,vi",
            "ii,i,iv,iii,v,vi",
            "i,ii,iii,iv,vi,v"
        ],
        "answer": "a",
        "explanation": "Explanation: For order of precedence, just remember this PEMDAS (similar to BODMAS)."
    },
    {
        "question": "What is the answer to this expression, 22 % 3 is?",
        "options": [
            "7",
            "1",
            "0",
            "5"
        ],
        "answer": "b",
        "explanation": "Explanation: Modulus operator gives the remainder. So, 22%3 gives the remainder, that is, 1."
    },
    {
        "question": "Mathematical operations can be performed on a string.",
        "options": [
            "True",
            "False"
        ],
        "answer": "b",
        "explanation": "Explanation: You can\u2019t perform mathematical operation on string even if the string is in the form: \u20181234\u2026\u2019."
    },
    {
        "question": "Operators with the same precedence are evaluated in which manner?",
        "options": [
            "Left to Right",
            "Right to Left",
            "Can\u2019t say",
            "None of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: None."
    },
    {
        "question": "What is the output of this expression, 3*1**3?",
        "options": [
            "27",
            "9",
            "3",
            "1"
        ],
        "answer": "c",
        "explanation": "Explanation: First this expression will solve 1**3 because exponential has higher precedence than multiplication, so 1**3 = 1 and 3*1 = 3. Final answer is 3."
    },
    {
        "question": "Which one of the following has the same precedence level?",
        "options": [
            "Addition and Subtraction",
            "Multiplication, Division and Addition",
            "Multiplication, Division, Addition and Subtraction",
            "Addition and Multiplication"
        ],
        "answer": "a",
        "explanation": "Explanation: \u201cAddition and Subtraction\u201d are at the same precedence level. Similarly, \u201cMultiplication and Division\u201d are at the same precedence level. However, Multiplication and Division operators are at a higher precedence level than Addition and Subtraction operators."
    },
    {
        "question": "The expression Int(x) implies that the variable x is converted to integer.",
        "options": [
            "True",
            "False"
        ],
        "answer": "a",
        "explanation": "Explanation: None."
    },
    {
        "question": "Which one of the following has the highest precedence in the expression?",
        "options": [
            "Exponential",
            "Addition",
            "Multiplication",
            "Parentheses"
        ],
        "answer": "d",
        "explanation": "Explanation: Just remember: PEMDAS, that is, Parenthesis, Exponentiation, Division, Multiplication, Addition, Subtraction. Note that the precedence order of Division and Multiplication is the same. Likewise, the order of Addition and Subtraction is also the same."
    },
    {
        "question": "Which of these in not a core data type?",
        "options": [
            "Lists",
            "Dictionary",
            "Tuples",
            "Class"
        ],
        "answer": "d",
        "explanation": "Explanation: Class is a user defined data type."
    },
    {
        "question": "Given a function that does not return any value, What value is thrown by default when executed in shell.",
        "options": [
            "int",
            "bool",
            "void",
            "None"
        ],
        "answer": "d",
        "explanation": "Explanation: Python shell throws a NoneType object back."
    },
    {
        "question": "What is the output of print 0.1 + 0.2 == 0.3?",
        "options": [
            "True",
            "False",
            "Machine dependent",
            "Error"
        ],
        "answer": "b",
        "explanation": "Explanation: Neither of 0.1, 0.2 and 0.3 can be represented accurately in binary. The round off errors from 0.1 and 0.2 accumulate and hence there is a difference of 5.5511e-17 between (0.1 + 0.2) and 0.3."
    },
    {
        "question": "Which of the following is not a complex number?",
        "options": [
            "k = 2 + 3j",
            "k = complex(2, 3)",
            "k = 2 + 3l",
            "k = 2 + 3J"
        ],
        "answer": "c",
        "explanation": "Explanation: l (or L) stands for long."
    },
    {
        "question": "What is the type of inf?",
        "options": [
            "Boolean",
            "Integer",
            "Float",
            "Complex"
        ],
        "answer": "c",
        "explanation": "Explanation: Infinity is a special case of floating point numbers. It can be obtained by float(\u2018inf\u2019)."
    },
    {
        "question": "What does ~4 evaluate to?",
        "options": [
            "-5",
            "-4",
            "-3",
            "+3"
        ],
        "answer": "a",
        "explanation": "Explanation: ~x is equivalent to -(x+1)."
    },
    {
        "question": "What does ~~~~~~5 evaluate to?",
        "options": [
            "+5",
            "-11",
            "+11",
            "-5"
        ],
        "answer": "a",
        "explanation": "Explanation: ~x is equivalent to -(x+1).\n~~x = \u2013 (-(x+1) + 1) = (x+1) \u2013 1 = x\n~~x is equivalent to x\nExtrapolating further ~~~~~~x would be same as x in the final result.\nIn the question, x value is given as 5 and \u201c~\u201d is repeated 6 times. So, the correct answer for \u201c~~~~~~5\u201d is 5."
    },
    {
        "question": "Which of the following is incorrect?",
        "options": [
            "x = 0b101",
            "x = 0x4f5",
            "x = 19023",
            "x = 03964"
        ],
        "answer": "d",
        "explanation": "Explanation: Numbers starting with a 0 are octal numbers but 9 isn\u2019t allowed in octal numbers."
    },
    {
        "question": "What is the result of cmp(3, 1)?",
        "options": [
            "1",
            "0",
            "True",
            "False"
        ],
        "answer": "a",
        "explanation": "Explanation: cmp(x, y) returns 1 if x > y, 0 if x == y and -1 if x < y."
    },
    {
        "question": "Which of the following is incorrect?",
        "options": [
            "float(\u2018inf\u2019)",
            "float(\u2018nan\u2019)",
            "float(\u201956\u2019+\u201978\u2019)",
            "float(\u201912+34\u2032)"
        ],
        "answer": "d",
        "explanation": "Explanation: \u2018+\u2019 cannot be converted to a float."
    },
    {
        "question": "What is the result of round(0.5) \u2013 round(-0.5)?",
        "options": [
            "1.0",
            "2.0",
            "0.0",
            "Value depends on Python version"
        ],
        "answer": "d",
        "explanation": "Explanation: The behavior of the round() function is different in Python 2 and Python 3. In Python 2, it rounds off numbers away from 0 when the number to be rounded off is exactly halfway through. round(0.5) is 1 and round(-0.5) is -1 whereas in Python 3, it rounds off numbers towards nearest even number when the number to be rounded off is exactly halfway through. See the below output.\n\n\nadvertisement\n\n\n\n\nHere\u2019s the runtime output for Python version 2.7 interpreter.\n$ python\r\nPython 2.7.17 (default, Nov  7 2019, 10:07:09)\r\n>>> round(0.5)\r\n1.0\r\n>>> round(-0.5)\r\n-1.0\r\n>>>\r\n\nIn the above output, you can see that the round() functions on 0.5 and -0.5 are moving away from 0 and hence \u201cround(0.5) \u2013 (round(-0.5)) = 1 \u2013 (-1) = 2\u201d\nHere\u2019s the runtime output for Python version 3.6 interpreter.\n$ python3\r\nPython 3.6.8 (default, Oct  7 2019, 12:59:55)\r\n>>> round(0.5)\r\n0\r\n>>> round(-0.5)\r\n0\r\n>>> round(2.5)\r\n2\r\n>>> round(3.5)\r\n4\r\n>>>\r\n\nIn the above output, you can see that the round() functions on 0.5 and -0.5 are moving towards 0 and hence \u201cround(0.5) \u2013 (round(-0.5)) = 0 \u2013 0 = 0\u201c. Also note that the round(2.5) is 2 (which is an even number) whereas round(3.5) is 4 (which is an even number)."
    },
    {
        "question": "The value of the expressions 4/(3*(2-1)) and 4/3*(2-1) is the same.",
        "options": [
            "True",
            "False"
        ],
        "answer": "a",
        "explanation": "Explanation: Although the presence of parenthesis does affect the order of precedence, in the case shown above, it is not making a difference. The result of both of these expressions is 1.333333333. Hence the statement is true."
    },
    {
        "question": "It is not possible for the two\u2019s complement value to be equal to the original value in any case.",
        "options": [
            "True",
            "False"
        ],
        "answer": "b",
        "explanation": "Explanation: In most cases the value of two\u2019s complement is different from the original value. However, there are cases in which the two\u2019s complement value may be equal to the original value. For example, the two\u2019s complement of 10000000 is also equal to 10000000. Hence the statement is false."
    },
    {
        "question": "The one\u2019s complement of 110010101 is:",
        "options": [
            "001101010",
            "110010101",
            "001101011",
            "110010100"
        ],
        "answer": "a",
        "explanation": "Explanation: The one\u2019s complement of a value is obtained by simply changing all the 1\u2019s to 0\u2019s and all the 0\u2019s to 1\u2019s. Hence the one\u2019s complement of 110010101 is 001101010."
    },
    {
        "question": "Bitwise _________ gives 1 if either of the bits is 1 and 0 when both of the bits are 1.",
        "options": [
            "OR",
            "AND",
            "XOR",
            "NOT"
        ],
        "answer": "c",
        "explanation": "Explanation: Bitwise XOR gives 1 if either of the bits is 1 and 0 when both of the bits are 1."
    },
    {
        "question": "What is \u201cHello\u201d.replace(\u201cl\u201d, \u201ce\u201d)?",
        "options": [
            "Heeeo",
            "Heelo",
            "Heleo",
            "None"
        ],
        "answer": "a",
        "explanation": "Explanation: Execute in shell to verify."
    },
    {
        "question": "To retrieve the character at index 3 from string s=\u201dHello\u201d what command do we execute (multiple answers allowed)?",
        "options": [
            "s[]",
            "s.getitem(3)",
            "s.__getitem__(3)",
            "s.getItem(3)"
        ],
        "answer": "c",
        "explanation": "Explanation: __getitem(..) can be used to get character at index specified as parameter."
    },
    {
        "question": "To return the length of string s what command do we execute?",
        "options": [
            "s.__len__()",
            "len(s)",
            "size(s)",
            "s.size()"
        ],
        "answer": "a",
        "explanation": "Explanation: Execute in shell to verify."
    },
    {
        "question": "If a class defines the __str__(self) method, for an object obj for the class, you can use which command to invoke the __str__ method.",
        "options": [
            "obj.__str__()",
            "str(obj)",
            "print obj",
            "all of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: Execute in shell to verify."
    },
    {
        "question": "To check whether string s1 contains another string s2, use ________",
        "options": [
            "s1.__contains__(s2)",
            "s2 in s1",
            "s1.contains(s2)",
            "si.in(s2)"
        ],
        "answer": "a",
        "explanation": "Explanation: s2 in s1 works in the same way as calling the special function __contains__ ."
    },
    {
        "question": "Suppose i is 5 and j is 4, i + j is same as ________",
        "options": [
            "i.__add(j)",
            "i.__add__(j)",
            "i.__Add(j)",
            "i.__ADD(j)"
        ],
        "answer": "b",
        "explanation": "Explanation: Execute in shell to verify."
    },
    {
        "question": "Which of the following commands will create a list?",
        "options": [
            "list1 = list()",
            "list1 = []",
            "list1 = list([1, 2, 3])",
            "all of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: Execute in the shell to verify"
    },
    {
        "question": "What is the output when we execute list(\u201chello\u201d)?",
        "options": [
            "[\u2018h\u2019, \u2018e\u2019, \u2018l\u2019, \u2018l\u2019, \u2018o\u2019]",
            "[\u2018hello\u2019]",
            "[\u2018llo\u2019]",
            "[\u2018olleh\u2019]"
        ],
        "answer": "a",
        "explanation": "Explanation: Execute in the shell to verify."
    },
    {
        "question": "Suppose listExample is [\u2018h\u2019,\u2019e\u2019,\u2019l\u2019,\u2019l\u2019,\u2019o\u2019], what is len(listExample)?",
        "options": [
            "5",
            "4",
            "None",
            "Error"
        ],
        "answer": "a",
        "explanation": "Explanation: Execute in the shell and verify."
    },
    {
        "question": "Suppose list1 is [2445,133,12454,123], what is max(list1)?",
        "options": [
            "2445",
            "133",
            "12454",
            "123"
        ],
        "answer": "c",
        "explanation": "Explanation: Max returns the maximum element in the list."
    },
    {
        "question": "Suppose list1 is [3, 5, 25, 1, 3], what is min(list1)?",
        "options": [
            "3",
            "5",
            "25",
            "1"
        ],
        "answer": "d",
        "explanation": "Explanation: Min returns the minimum element in the list."
    },
    {
        "question": "Suppose list1 is [1, 5, 9], what is sum(list1)?",
        "options": [
            "1",
            "9",
            "15",
            "Error"
        ],
        "answer": "c",
        "explanation": "Explanation: Sum returns the sum of all elements in the list."
    },
    {
        "question": "To shuffle the list(say list1) what function do we use?",
        "options": [
            "list1.shuffle()",
            "shuffle(list1)",
            "random.shuffle(list1)",
            "random.shuffleList(list1)"
        ],
        "answer": "c",
        "explanation": "Explanation: Execute in the shell to verify."
    },
    {
        "question": "Suppose list1 is [4, 2, 2, 4, 5, 2, 1, 0], Which of the following is correct syntax for slicing operation?",
        "options": [
            "print(list1[0])",
            "print(list1[:2])",
            "print(list1[:-2])",
            "all of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: Slicing is allowed in lists just as in the case of strings."
    },
    {
        "question": "Suppose list1 is [2, 33, 222, 14, 25], What is list1[-1]?",
        "options": [
            "Error",
            "None",
            "25",
            "2"
        ],
        "answer": "c",
        "explanation": "Explanation: -1 corresponds to the last index in the list."
    },
    {
        "question": "Suppose list1 is [2, 33, 222, 14, 25], What is list1[:-1]?",
        "options": [
            "[2, 33, 222, 14]",
            "Error",
            "25",
            "[25, 14, 222, 33, 2]"
        ],
        "answer": "a",
        "explanation": "Explanation: Execute in the shell to verify."
    },
    {
        "question": "Suppose list1 is [3, 4, 5, 20, 5, 25, 1, 3], what is list1 after list1.reverse()?",
        "options": [
            "[3, 4, 5, 20, 5, 25, 1, 3]",
            "[1, 3, 3, 4, 5, 5, 20, 25]",
            "[25, 20, 5, 5, 4, 3, 3, 1]",
            "[3, 1, 25, 5, 20, 5, 4, 3]"
        ],
        "answer": "d",
        "explanation": "Explanation: Execute in the shell to verify."
    },
    {
        "question": "Suppose listExample is [3, 4, 5, 20, 5, 25, 1, 3], what is list1 after listExample.extend([34, 5])?",
        "options": [
            "[3, 4, 5, 20, 5, 25, 1, 3, 34, 5]",
            "[1, 3, 3, 4, 5, 5, 20, 25, 34, 5]",
            "[25, 20, 5, 5, 4, 3, 3, 1, 34, 5]",
            "[1, 3, 4, 5, 20, 5, 25, 3, 34, 5]"
        ],
        "answer": "a",
        "explanation": "Explanation: Execute in the shell to verify."
    },
    {
        "question": "Suppose listExample is [3, 4, 5, 20, 5, 25, 1, 3], what is list1 after listExample.pop(1)?",
        "options": [
            "[3, 4, 5, 20, 5, 25, 1, 3]",
            "[1, 3, 3, 4, 5, 5, 20, 25]",
            "[3, 5, 20, 5, 25, 1, 3]",
            "[1, 3, 4, 5, 20, 5, 25]"
        ],
        "answer": "c",
        "explanation": "Explanation: pop() removes the element at the position specified in the parameter."
    },
    {
        "question": "Suppose listExample is [3, 4, 5, 20, 5, 25, 1, 3], what is list1 after listExample.pop()?",
        "options": [
            "[3, 4, 5, 20, 5, 25, 1]",
            "[1, 3, 3, 4, 5, 5, 20, 25]",
            "[3, 5, 20, 5, 25, 1, 3]",
            "[1, 3, 4, 5, 20, 5, 25]"
        ],
        "answer": "a",
        "explanation": "Explanation: pop() by default will remove the last element."
    },
    {
        "question": "Which of the following is a Python tuple?",
        "options": [
            "[1, 2, 3]",
            "(1, 2, 3)",
            "{1, 2, 3}",
            "{}"
        ],
        "answer": "b",
        "explanation": "Explanation: Tuples are represented with round brackets."
    },
    {
        "question": "Suppose t = (1, 2, 4, 3), which of the following is incorrect?",
        "options": [
            "print(t[3])",
            "t[3] = 45",
            "print(max(t))",
            "print(len(t))"
        ],
        "answer": "b",
        "explanation": "Explanation: Values cannot be modified in the case of tuple, that is, tuple is immutable."
    },
    {
        "question": "What is the data type of (1)?",
        "options": [
            "Tuple",
            "Integer",
            "List",
            "Both tuple and integer"
        ],
        "answer": "b",
        "explanation": "Explanation: A tuple of one element must be created as (1,)."
    },
    {
        "question": "If a=(1,2,3,4), a[1:-1] is _________",
        "options": [
            "Error, tuple slicing doesn\u2019t exist",
            "[2,3]",
            "(2,3,4)",
            "(2,3)"
        ],
        "answer": "d",
        "explanation": "Explanation: Tuple slicing exists and a[1:-1] returns (2,3)."
    },
    {
        "question": "Which of these about a set is not true?",
        "options": [
            "Mutable data type",
            "Allows duplicate values",
            "Data type with unordered values",
            "Immutable data type"
        ],
        "answer": "d",
        "explanation": "Explanation: A set is a mutable data type with non-duplicate, unordered values, providing the usual mathematical set operations."
    },
    {
        "question": "Which of the following is not the correct syntax for creating a set?",
        "options": [
            "set([[1,2],[3,4]])",
            "set([1,2,2,3,4])",
            "set((1,2,3,4))",
            "{1,2,3,4}"
        ],
        "answer": "a",
        "explanation": "Explanation: The argument given for the set must be an iterable."
    },
    {
        "question": "Which of these about a frozenset is not true?",
        "options": [
            "Mutable data type",
            "Allows duplicate values",
            "Data type with unordered values",
            "Immutable data type"
        ],
        "answer": "a",
        "explanation": "Explanation: A frozenset is an immutable data type."
    },
    {
        "question": "Which of the following functions will return the symmetric difference between two sets, x and y?",
        "options": [
            "x | y",
            "x ^ y",
            "x & y",
            "x \u2013 y"
        ],
        "answer": "b",
        "explanation": "Explanation: The function x ^ y returns the symmetric difference between the two sets x and y. This is basically an XOR operation being performed on the two sets."
    },
    {
        "question": "Which of the following statements create a dictionary?",
        "options": [
            "d = {}",
            "d = {\u201cjohn\u201d:40, \u201cpeter\u201d:45}",
            "d = {40:\u201djohn\u201d, 45:\u201dpeter\u201d}",
            "All of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: Dictionaries are created by specifying keys and values."
    },
    {
        "question": "Which of these about a dictionary is false?",
        "options": [
            "The values of a dictionary can be accessed using keys",
            "The keys of a dictionary can be accessed using values",
            "Dictionaries aren\u2019t ordered",
            "Dictionaries are mutable"
        ],
        "answer": "b",
        "explanation": "Explanation: The values of a dictionary can be accessed using keys but the keys of a dictionary can\u2019t be accessed using values."
    },
    {
        "question": "Which of the following is not a declaration of the dictionary?",
        "options": [
            "{1: \u2018A\u2019, 2: \u2018B\u2019}",
            "dict([[1,\u201dA\u201d],[2,\u201dB\u201d]])",
            "{1,\u201dA\u201d,2\u201dB\u201d}",
            "{ }"
        ],
        "answer": "c",
        "explanation": "Explanation: Option c is a set, not a dictionary."
    },
    {
        "question": "Which of the statements about dictionary values if false?",
        "options": [
            "More than one key can have the same value",
            "The values of the dictionary can be accessed as dict[key]",
            "Values of a dictionary must be unique",
            "Values of a dictionary can be a mixture of letters and numbers"
        ],
        "answer": "c",
        "explanation": "Explanation: More than one key can have the same value."
    },
    {
        "question": "Which of the following functions is a built-in function in python?",
        "options": [
            "seed()",
            "sqrt()",
            "factorial()",
            "print()"
        ],
        "answer": "d",
        "explanation": "Explanation: The function seed is a function which is present in the random module. The functions sqrt and factorial are a part of the math module. The print function is a built-in function which prints a value directly to the system output."
    },
    {
        "question": "Which of the following functions accepts only integers as arguments?",
        "options": [
            "ord()",
            "min()",
            "chr()",
            "any()"
        ],
        "answer": "c",
        "explanation": "Explanation: The function chr() accepts only integers as arguments. The function ord() accepts only strings. The functions min() and max() can accept floating point as well as integer arguments."
    },
    {
        "question": "Suppose there is a list such that: l=[2,3,4]. If we want to print this list in reverse order, which of the following methods should be used?",
        "options": [
            "reverse(l)",
            "list(reverse[(l)])",
            "reversed(l)",
            "list(reversed(l))"
        ],
        "answer": "d",
        "explanation": "Explanation: The built-in function reversed() can be used to reverse the elements of a list. This function accepts only an iterable as an argument. To print the output in the form of a list, we use: list(reversed(l)). The output will be: [4,3,2]."
    },
    {
        "question": "Which of the following is the use of function in python?",
        "options": [
            "Functions are reusable pieces of programs",
            "Functions don\u2019t provide better modularity for your application",
            "you can\u2019t also create your own functions",
            "All of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: Functions are reusable pieces of programs. They allow you to give a name to a block of statements, allowing you to run that block using the specified name anywhere in your program and any number of times."
    },
    {
        "question": "Which keyword is used for function?",
        "options": [
            "Fun",
            "Define",
            "Def",
            "Function"
        ],
        "answer": "c",
        "explanation": "Explanation: None."
    },
    {
        "question": "Which are the advantages of functions in python?",
        "options": [
            "Reducing duplication of code",
            "Decomposing complex problems into simpler pieces",
            "Improving clarity of the code",
            "All of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: None."
    },
    {
        "question": "What are the two main types of functions?",
        "options": [
            "Custom function",
            "Built-in function & User defined function",
            "User function",
            "System function"
        ],
        "answer": "b",
        "explanation": "Explanation: Built-in functions and user defined ones. The built-in functions are part of the Python language. Examples are: dir(), len() or abs(). The user defined functions are functions created with the def keyword."
    },
    {
        "question": "Where is function defined?",
        "options": [
            "Module",
            "Class",
            "Another function",
            "All of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: Functions can be defined inside a module, a class or another function."
    },
    {
        "question": "What is called when a function is defined inside a class?",
        "options": [
            "Module",
            "Class",
            "Another function",
            "Method"
        ],
        "answer": "d",
        "explanation": "Explanation: None."
    },
    {
        "question": "Which of the following is the use of id() function in python?",
        "options": [
            "Id  returns the identity of the object",
            "Every object doesn\u2019t have a unique id",
            "All of the mentioned",
            "None of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: Each object in Python has a unique id. The id() function returns the object\u2019s id."
    },
    {
        "question": "Which of the following refers to mathematical function?",
        "options": [
            "sqrt",
            "rhombus",
            "add",
            "rhombus"
        ],
        "answer": "a",
        "explanation": "Explanation: Functions that are always available for usage, functions that are contained within external modules, which must be imported and functions defined by a programmer with the def keyword.\nEg:  math import sqrt\nA sqrt() function is imported from the math module."
    },
    {
        "question": "Python supports the creation of anonymous functions at runtime, using a construct called __________",
        "options": [
            "lambda",
            "pi",
            "anonymous",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: Python supports the creation of anonymous functions (i.e. functions that are not bound to a name) at runtime, using a construct called lambda. Lambda functions are restricted to a single expression. They can be used wherever normal functions can be used."
    },
    {
        "question": "What is a variable defined outside a function referred to as?",
        "options": [
            "A static variable",
            "A global variable",
            "A local variable",
            "An automatic variable"
        ],
        "answer": "b",
        "explanation": "Explanation: The value of a variable defined outside all function definitions is referred to as a global variable and can be used by multiple functions of the program."
    },
    {
        "question": "What is a variable defined inside a function referred to as?",
        "options": [
            "A global variable",
            "A volatile variable",
            "A local variable",
            "An automatic variable"
        ],
        "answer": "c",
        "explanation": "Explanation: The variable inside a function is called as local variable and the variable definition is confined only to that function."
    },
    {
        "question": "What is the type of each element in sys.argv?",
        "options": [
            "set",
            "list",
            "tuple",
            "string"
        ],
        "answer": "d",
        "explanation": "Explanation: It is a list of strings."
    },
    {
        "question": "What is the length of sys.argv?",
        "options": [
            "number of arguments",
            "number of arguments + 1",
            "number of arguments \u2013 1",
            "none of the mentioned"
        ],
        "answer": "b",
        "explanation": "Explanation: The first argument is the name of the program itself. Therefore the length of sys.argv is one more than the number arguments."
    },
    {
        "question": "Which of the following data structures is returned by the functions globals() and locals()?",
        "options": [
            "list",
            "set",
            "dictionary",
            "tuple"
        ],
        "answer": "c",
        "explanation": "Explanation: Both the functions, that is, globals() and locals() return value of the data structure dictionary."
    },
    {
        "question": "Which is the most appropriate definition for recursion?",
        "options": [
            "A function that calls itself",
            "A function execution instance that calls another execution instance of the same function",
            "A class method that calls another class method",
            "An in-built method that is automatically called"
        ],
        "answer": "b",
        "explanation": "Explanation: The appropriate definition for a recursive function is a function execution instance that calls another execution instance of the same function either directly or indirectly."
    },
    {
        "question": "Only problems that are recursively defined can be solved using recursion.",
        "options": [
            "True",
            "False"
        ],
        "answer": "b",
        "explanation": "Explanation: There are many other problems can also be solved using recursion."
    },
    {
        "question": "Which of these is false about recursion?",
        "options": [
            "Recursive function can be replaced by a non-recursive function",
            "Recursive functions usually take more memory space than non-recursive function",
            "Recursive functions run faster than non-recursive function",
            "Recursion makes programs easier to understand"
        ],
        "answer": "c",
        "explanation": "Explanation: The speed of a program using recursion is slower than the speed of its non-recursive equivalent."
    },
    {
        "question": "Which of these definitions correctly describes a module?",
        "options": [
            "Denoted by triple quotes for providing the specification of certain program elements",
            "Design and implementation of specific functionality to be incorporated into a program",
            "Defines the specification of how it is to be used",
            "Any program that reuses code"
        ],
        "answer": "b",
        "explanation": "Explanation: The term \u201cmodule\u201d refers to the implementation of specific functionality to be incorporated into a program."
    },
    {
        "question": "Which of the following is not an advantage of using modules?",
        "options": [
            "Provides a means of reuse of program code",
            "Provides a means of dividing up tasks",
            "Provides a means of reducing the size of the program",
            "Provides a means of testing individual parts of the program"
        ],
        "answer": "c",
        "explanation": "Explanation: The total size of the program remains the same regardless of whether modules are used or not. Modules simply divide the program."
    },
    {
        "question": "Program code making use of a given module is called a ______ of the module.",
        "options": [
            "Client",
            "Docstring",
            "Interface",
            "Modularity"
        ],
        "answer": "a",
        "explanation": "Explanation: Program code making use of a given module is called the client of the module. There may be multiple clients for a module."
    },
    {
        "question": "______ is a string literal denoted by triple quotes for providing the specifications of certain program elements.",
        "options": [
            "Interface",
            "Modularity",
            "Client",
            "Docstring"
        ],
        "answer": "d",
        "explanation": "Explanation: Docstring used for providing the specifications of program elements."
    },
    {
        "question": "Which of the following is true about top-down design process?",
        "options": [
            "The details of a program design are addressed before the overall design",
            "Only the details of the program are addressed",
            "The overall design of the program is addressed before the details",
            "Only the design of the program is addressed"
        ],
        "answer": "c",
        "explanation": "Explanation: Top-down design is an approach for deriving a modular design in which the overall design."
    },
    {
        "question": "In top-down design every module is broken into same number of submodules.",
        "options": [
            "True",
            "False"
        ],
        "answer": "b",
        "explanation": "Explanation: In top-down design every module can even be broken down into different number of submodules."
    },
    {
        "question": "All modular designs are because of a top-down design process.",
        "options": [
            "True",
            "False"
        ],
        "answer": "b",
        "explanation": "Explanation: The details of the program can be addressed before the overall design too. Hence, all modular designs are not because of a top-down design process."
    },
    {
        "question": "What is returned by math.ceil(3.4)?",
        "options": [
            "3",
            "4",
            "4.0",
            "3.0"
        ],
        "answer": "b",
        "explanation": "Explanation: The ceil function returns the smallest integer that is bigger than or equal to the number itself."
    },
    {
        "question": "What is the value returned by math.floor(3.4)?",
        "options": [
            "3",
            "4",
            "4.0",
            "3.0"
        ],
        "answer": "a",
        "explanation": "Explanation: The floor function returns the biggest number that is smaller than or equal to the number itself."
    },
    {
        "question": "What will be the output of print(math.copysign(3, -1))?",
        "options": [
            "1",
            "1.0",
            "-3",
            "-3.0"
        ],
        "answer": "d",
        "explanation": "Explanation: The copysign function returns a float whose absolute value is that of the first argument and the sign is that of the second argument."
    },
    {
        "question": "What is displayed on executing print(math.fabs(-3.4))?",
        "options": [
            "-3.4",
            "3.4",
            "3",
            "-3"
        ],
        "answer": "b",
        "explanation": "Explanation: A negative floating point number is returned as a positive floating point number."
    },
    {
        "question": "Is the output of the function abs() the same as that of the function math.fabs()?",
        "options": [
            "sometimes",
            "always",
            "never",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: math.fabs() always returns a float and does not work with complex numbers whereas the return type of abs() is determined by the type of value that is passed to it."
    },
    {
        "question": "What is the value returned by math.fact(6)?",
        "options": [
            "720",
            "6",
            "[1, 2, 3, 6]",
            "error"
        ],
        "answer": "d",
        "explanation": "Explanation: NameError, fact() is not defined."
    },
    {
        "question": "What is the value of x if x = math.factorial(0)?",
        "options": [
            "0",
            "1",
            "error",
            "none of the mentioned"
        ],
        "answer": "b",
        "explanation": "Explanation: Factorial of 0 is 1."
    },
    {
        "question": "What is math.factorial(4.0)?",
        "options": [
            "24",
            "1",
            "error",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: The factorial of 4 is returned."
    },
    {
        "question": "What will be the output of print(math.factorial(4.5))?",
        "options": [
            "24",
            "120",
            "error",
            "24.0"
        ],
        "answer": "c",
        "explanation": "Explanation: Factorial is only defined for non-negative integers."
    },
    {
        "question": "What is math.floor(0o10)?",
        "options": [
            "8",
            "10",
            "0",
            "9"
        ],
        "answer": "a",
        "explanation": "Explanation: 0o10 is 8 and floor(8) is 8."
    },
    {
        "question": "What does the function math.frexp(x) return?",
        "options": [
            "a tuple containing the mantissa and the exponent of x",
            "a list containing the mantissa and the exponent of x",
            "a tuple containing the mantissa of x",
            "a list containing the exponent of x"
        ],
        "answer": "a",
        "explanation": "Explanation: It returns a tuple with two elements. The first element is the mantissa and the second element is the exponent."
    },
    {
        "question": "What is the result of math.fsum([.1 for i in range(20)])?",
        "options": [
            "2.0",
            "20",
            "2",
            "2.0000000000000004"
        ],
        "answer": "a",
        "explanation": "Explanation: The function fsum returns an accurate floating point sum of the elements of its argument."
    },
    {
        "question": "What is the result of sum([.1 for i in range(20)])?",
        "options": [
            "2.0",
            "20",
            "2",
            "2.0000000000000004"
        ],
        "answer": "d",
        "explanation": "Explanation: There is some loss of accuracy when we use sum with floating point numbers. Hence the function fsum is preferable."
    },
    {
        "question": "What is returned by math.isfinite(float(\u2018inf\u2019))?",
        "options": [
            "True",
            "False",
            "None",
            "error"
        ],
        "answer": "b",
        "explanation": "Explanation: float(\u2018inf\u2019) is not a finite number."
    },
    {
        "question": "What is returned by math.isfinite(float(\u2018nan\u2019))?",
        "options": [
            "True",
            "False",
            "None",
            "error"
        ],
        "answer": "b",
        "explanation": "Explanation: float(\u2018nan\u2019) is not a finite number."
    },
    {
        "question": "What is x if x = math.isfinite(float(\u20180.0\u2019))?",
        "options": [
            "True",
            "False",
            "None",
            "error"
        ],
        "answer": "a",
        "explanation": "Explanation: float(\u20180.0\u2019) is a finite number."
    },
    {
        "question": "What is the result of math.trunc(3.1)?",
        "options": [
            "3.0",
            "3",
            "0.1",
            "1"
        ],
        "answer": "b",
        "explanation": "Explanation: The integral part of the floating point number is returned."
    },
    {
        "question": "What is the output of print(math.trunc(\u20183.1\u2019))?",
        "options": [
            "3",
            "3.0",
            "error",
            "none of the mentioned"
        ],
        "answer": "c",
        "explanation": "Explanation: TypeError, a string does not have __trunc__ method."
    },
    {
        "question": "Which of the following is the same as math.exp(p)?",
        "options": [
            "e ** p",
            "math.e ** p",
            "p ** e",
            "p ** math.e"
        ],
        "answer": "b",
        "explanation": "Explanation: math.e is the constant defined in the math module."
    },
    {
        "question": "What is returned by math.expm1(p)?",
        "options": [
            "(math.e ** p) \u2013 1",
            "math.e ** (p \u2013 1)",
            "error",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: One is subtracted from the result of math.exp(p) and returned."
    },
    {
        "question": "What is the default base used when math.log(x) is found?",
        "options": [
            "e",
            "10",
            "2",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: The natural log of x is returned by default."
    },
    {
        "question": "Which of the following aren\u2019t defined in the math module?",
        "options": [
            "log2()",
            "log10()",
            "logx()",
            "none of the mentioned"
        ],
        "answer": "c",
        "explanation": "Explanation: log2() and log10() are defined in the math module."
    },
    {
        "question": "What is returned by int(math.pow(3, 2))?",
        "options": [
            "6",
            "9",
            "error, third argument required",
            "error, too many arguments"
        ],
        "answer": "b",
        "explanation": "Explanation: math.pow(a, b) returns a ** b."
    },
    {
        "question": "What is output of print(math.pow(3, 2))?",
        "options": [
            "9",
            "9.0",
            "None",
            "None of the mentioned"
        ],
        "answer": "b",
        "explanation": "Explanation: math.pow() returns a floating point number."
    },
    {
        "question": "What is the value of x if x = math.sqrt(4)?",
        "options": [
            "2",
            "2.0",
            "(2, -2)",
            "(2.0, -2.0)"
        ],
        "answer": "b",
        "explanation": "Explanation: The function returns one floating point number."
    },
    {
        "question": "What does math.sqrt(X, Y) do?",
        "options": [
            "calculate the Xth root of Y",
            "calculate the Yth root of X",
            "error",
            "return a tuple with the square root of X and Y"
        ],
        "answer": "c",
        "explanation": "Explanation: The function takes only one argument."
    },
    {
        "question": "To include the use of functions which are present in the random library, we must use the option:",
        "options": [
            "import random",
            "random.h",
            "import.random",
            "random.random"
        ],
        "answer": "a",
        "explanation": "Explanation: The command import random is used to import the random module, which enables us to use the functions which are present in the random library."
    },
    {
        "question": "What the does random.seed(3) return?",
        "options": [
            "True",
            "None",
            "3",
            "1"
        ],
        "answer": "b",
        "explanation": "Explanation: The function random.seed() always returns a None."
    },
    {
        "question": "Which of the following cannot be returned by random.randrange(4)?",
        "options": [
            "0",
            "3",
            "2.3",
            "none of the mentioned"
        ],
        "answer": "c",
        "explanation": "Explanation: Only integers can be returned."
    },
    {
        "question": "Which of the following is equivalent to random.randrange(3)?",
        "options": [
            "range(3)",
            "random.choice(range(0, 3))",
            "random.shuffle(range(3))",
            "random.select(range(3))"
        ],
        "answer": "b",
        "explanation": "Explanation: It returns one number from the given range."
    },
    {
        "question": "The function random.randint(4) can return only one of the following values. Which?",
        "options": [
            "4",
            "3.4",
            "error",
            "5"
        ],
        "answer": "c",
        "explanation": "Explanation: Error, the function takes two arguments."
    },
    {
        "question": "Which of the following is equivalent to random.randint(3, 6)?",
        "options": [
            "random.choice([3, 6])",
            "random.randrange(3, 6)",
            "3 + random.randrange(3)",
            "3 + random.randrange(4)"
        ],
        "answer": "d",
        "explanation": "Explanation: random.randint(3, 6) can return any one of 3, 4, 5 and 6."
    },
    {
        "question": "Which of the following will not be returned by random.choice(\u201c1 ,\u201d)?",
        "options": [
            "1",
            "(space)",
            ",",
            "none of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: Any of the characters present in the string may be returned."
    },
    {
        "question": "Which of the following will never be displayed on executing print(random.choice({0: 1, 2: 3}))?",
        "options": [
            "0",
            "1",
            "KeyError: 1",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: It will not print 0 but dict[0] i.e. 1 may be printed."
    },
    {
        "question": "What does random.shuffle(x) do when x = [1, 2, 3]?",
        "options": [
            "error",
            "do nothing, it is a placeholder for a function that is yet to be implemented",
            "shuffle the elements of the list in-place",
            "none of the mentioned"
        ],
        "answer": "c",
        "explanation": "Explanation: The elements of the list passed to it are shuffled in-place."
    },
    {
        "question": "Which type of elements are accepted by random.shuffle()?",
        "options": [
            "strings",
            "lists",
            "tuples",
            "integers"
        ],
        "answer": "b",
        "explanation": "Explanation: Strings and tuples are immutable and an integer has no len()."
    },
    {
        "question": "What is the range of values that random.random() can return?",
        "options": [
            "[0.0, 1.0]",
            "(0.0, 1.0]",
            "(0.0, 1.0)",
            "[0.0, 1.0)"
        ],
        "answer": "d",
        "explanation": "Explanation: Any number that is greater than or equal to 0.0 and lesser than 1.0 can be returned."
    },
    {
        "question": "Which of the following functions can help us to find the version of python that we are currently working on?",
        "options": [
            "sys.version",
            "sys.version()",
            "sys.version(0)",
            "sys.version(1)"
        ],
        "answer": "a",
        "explanation": "Explanation: The function sys.version can help us to find the version of python that we are currently working on. For example, 3.5.2, 2.7.3 etc. this function also returns the current date, time, bits etc along with the version."
    },
    {
        "question": "Which of the following functions is not defined under the sys module?",
        "options": [
            "sys.platform",
            "sys.path",
            "sys.readline",
            "sys.argv"
        ],
        "answer": "c",
        "explanation": "Explanation: The functions sys.platform, sys.path and sys.argv are defined under the sys module. The function sys.readline is not defined. However, sys.stdin.readline is defined."
    },
    {
        "question": "The output of the functions len(\u201cabc\u201d) and sys.getsizeof(\u201cabc\u201d) will be the same.",
        "options": [
            "True",
            "False"
        ],
        "answer": "b",
        "explanation": "Explanation: The function len returns the length of the string passed, and hence it\u2019s output will be 3. The function getsizeof, present under the sys module returns the size of the object passed. It\u2019s output will be a value much larger than 3. Hence the above statement is false."
    },
    {
        "question": "What does os.name contain?",
        "options": [
            "the name of the operating system dependent module imported",
            "the address of the module os",
            "error, it should\u2019ve been os.name()",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: It contains the name of the operating system dependent module imported such as \u2018posix\u2019, \u2018java\u2019 etc."
    },
    {
        "question": "What does print(os.geteuid()) print?",
        "options": [
            "the group id of the current process",
            "the user id of the current process",
            "both the group id and the user of the current process",
            "none of the mentioned"
        ],
        "answer": "b",
        "explanation": "Explanation: os.geteuid() gives the user id while the os.getegid() gives the group id."
    },
    {
        "question": "What does os.getlogin() return?",
        "options": [
            "name of the current user logged in",
            "name of the superuser",
            "gets a form to login as a different user",
            "all of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: It returns the name of the user who is currently logged in and is running the script."
    },
    {
        "question": "What does os.close(f) do?",
        "options": [
            "terminate the process f",
            "terminate the process f if f is not responding",
            "close the file descriptor f",
            "return an integer telling how close the file pointer is to the end of file"
        ],
        "answer": "c",
        "explanation": "Explanation: When a file descriptor is passed as an argument to os.close() it will be closed."
    },
    {
        "question": "What does os.fchmod(fd, mode) do?",
        "options": [
            "change permission bits of the file",
            "change permission bits of the directory",
            "change permission bits of either the file or the directory",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: The arguments to the function are a file descriptor and the new mode."
    },
    {
        "question": "Which of the following functions can be used to read data from a file using a file descriptor?",
        "options": [
            "os.reader()",
            "os.read()",
            "os.quick_read()",
            "os.scan()"
        ],
        "answer": "b",
        "explanation": "Explanation: None of the other functions exist."
    },
    {
        "question": "Which of the following returns a string that represents the present working directory?",
        "options": [
            "os.getcwd()",
            "os.cwd()",
            "os.getpwd()",
            "os.pwd()"
        ],
        "answer": "a",
        "explanation": "Explanation: The function getcwd() (get current working directory) returns a string that represents the present working directory."
    },
    {
        "question": "What does os.link() do?",
        "options": [
            "create a symbolic link",
            "create a hard link",
            "create a soft link",
            "none of the mentioned"
        ],
        "answer": "b",
        "explanation": "Explanation: os.link(source, destination) will create a hard link from source to destination."
    },
    {
        "question": "Which of the following can be used to create a directory?",
        "options": [
            "os.mkdir()",
            "os.creat_dir()",
            "os.create_dir()",
            "os.make_dir()"
        ],
        "answer": "a",
        "explanation": "Explanation: The function mkdir() creates a directory in the path specified."
    },
    {
        "question": "Which of the following can be used to create a symbolic link?",
        "options": [
            "os.symlink()",
            "os.symb_link()",
            "os.symblin()",
            "os.ln()"
        ],
        "answer": "a",
        "explanation": "Explanation: It is the function that allows you to create a symbolic link."
    },
    {
        "question": "Which of the following functions results in an error?",
        "options": [
            "turtle.shape(\u201cturtle\u201d)",
            "turtle.shape(\u201csquare\u201d)",
            "turtle.shape(\u201ctriangle\u201d)",
            "turtle.shape(\u201crectangle\u201d)"
        ],
        "answer": "d",
        "explanation": "Explanation: The functions shown above will change the arrow to the shape mentioned. The functions turtle.shape(\u201cturtle\u201d), turtle.shape(\u201csquare\u201d) and turtle.shape(\u201ctriangle\u201d) are valid whereas the function turtle.shape(\u201crectangle\u201d) is invalid."
    },
    {
        "question": "The process of pickling in Python includes:",
        "options": [
            "conversion of a list into a datatable",
            "conversion of a byte stream into Python object hierarchy",
            "conversion of a Python object hierarchy into byte stream",
            "conversion of a datatable into a list"
        ],
        "answer": "c",
        "explanation": "Explanation: Pickling is the process of sterilizing a Python object, that is, conversion of a byte stream into Python object hierarchy. The reverse of this process is known as unpickling."
    },
    {
        "question": "To sterilize an object hierarchy, the _____________ function must be called. To desterilize a data stream, the ______________ function must be called.",
        "options": [
            "dumps(), undumps()",
            "loads(), unloads()",
            "loads(), dumps()",
            "dumps(), loads()"
        ],
        "answer": "d",
        "explanation": "Explanation: To sterilize an object hierarchy, the dumps() function must be called. To desterilize a data stream, the loads function must be called."
    },
    {
        "question": "Pick the correct statement regarding pickle and marshal modules.",
        "options": [
            "The pickle module supports primarily .pyc files whereas marshal module is used to sterilize Python objects",
            "The pickle module keeps track of the objects that have already been sterilized whereas the marshal module does not do this",
            "The pickle module cannot be used to sterilize user defined classes and their instances whereas marshal module can be used to perform this task",
            "The format of sterilization of the pickle module is not guaranteed to be supported across all versions of Python. The marshal module sterilization is compatible across all the versions of Python"
        ],
        "answer": "b",
        "explanation": "Explanation: The correct statement from among the above options is that the python module keeps track of the objects that have already been sterilized whereas the marshal module does not do this. The rest of the statements are incorrect."
    },
    {
        "question": "Which module in Python supports regular expressions?",
        "options": [
            "re",
            "regex",
            "pyregex",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: re is a part of the standard library and can be imported using: import re."
    },
    {
        "question": "Which of the following creates a pattern object?",
        "options": [
            "re.create(str)",
            "re.regex(str)",
            "re.compile(str)",
            "re.assemble(str)"
        ],
        "answer": "c",
        "explanation": "Explanation: It converts a given string into a pattern object."
    },
    {
        "question": "What does the function re.match do?",
        "options": [
            "matches a pattern at the start of the string",
            "matches a pattern at any position in the string",
            "such a function does not exist",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: It will look for the pattern at the beginning and return None if it isn\u2019t found."
    },
    {
        "question": "What does the function re.search do?",
        "options": [
            "matches a pattern at the start of the string",
            "matches a pattern at any position in the string",
            "such a function does not exist",
            "none of the mentioned"
        ],
        "answer": "b",
        "explanation": "Explanation: It will look for the pattern at any position in the string."
    },
    {
        "question": "The character Dot (that is, \u2018.\u2019) in the default mode, matches any character other than _____________",
        "options": [
            "caret",
            "ampersand",
            "percentage symbol",
            "newline"
        ],
        "answer": "d",
        "explanation": "Explanation: The character Dot (that is, \u2018,\u2019) in the default mode, matches any character other than newline. If DOTALL flag is used, then it matches any character other than newline."
    },
    {
        "question": "The expression a{5} will match _____________ characters with the previous regular expression.",
        "options": [
            "5 or less",
            "exactly 5",
            "5 or more",
            "exactly 4"
        ],
        "answer": "b",
        "explanation": "Explanation: The character {m} is used to match exactly m characters to the previous regular expression. Hence the expression a{5} will match exactly 5 characters and not less than that."
    },
    {
        "question": "________ matches the start of the string.",
        "options": [
            "________ matches the end of the string.",
            "\u2018^\u2019, \u2018$\u2019",
            "\u2018$\u2019, \u2018^\u2019",
            "\u2018$\u2019, \u2018?\u2019",
            "\u2018?\u2019, \u2018^\u2019"
        ],
        "answer": "a",
        "explanation": "Explanation: \u2018^\u2019 (carat) matches the start of the string.\n             \u2018$\u2019 (dollar sign) matches the end of the string."
    },
    {
        "question": "Which of the following functions returns a dictionary mapping group names to group numbers?",
        "options": [
            "re.compile.group",
            "re.compile.groupindex",
            "re.compile.index",
            "re.compile.indexgroup"
        ],
        "answer": "b",
        "explanation": "Explanation: The function re.compile.groupindex returns a dictionary mapping group names to group numbers."
    },
    {
        "question": "Which of the following statements regarding the output of the function re.match is incorrect?",
        "options": [
            "\u2018pq*\u2019 will match \u2018pq\u2019",
            "\u2018pq?\u2019 matches \u2018p\u2019",
            "\u2018p{4}, q\u2019 does not match \u2018pppq\u2019",
            "\u2018pq+\u2019 matches \u2018p\u2019"
        ],
        "answer": "d",
        "explanation": "Explanation: All of the above statements are correct except that \u2018pq+\u2019 match \u2018p\u2019. \u2018pq+\u2019 will match \u2018p\u2019 followed by any non-zero number of q\u2019s, but it will not match \u2018p\u2019."
    },
    {
        "question": "To open a file c:\\scores.txt for reading, we use _____________",
        "options": [
            "infile = open(\u201cc:\\scores.txt\u201d, \u201cr\u201d)",
            "infile = open(\u201cc:\\\\scores.txt\u201d, \u201cr\u201d)",
            "infile = open(file = \u201cc:\\scores.txt\u201d, \u201cr\u201d)",
            "infile = open(file = \u201cc:\\\\scores.txt\u201d, \u201cr\u201d)"
        ],
        "answer": "b",
        "explanation": "Explanation: Execute help(open) to get more details."
    },
    {
        "question": "To open a file c:\\scores.txt for writing, we use ____________",
        "options": [
            "outfile = open(\u201cc:\\scores.txt\u201d, \u201cw\u201d)",
            "outfile = open(\u201cc:\\\\scores.txt\u201d, \u201cw\u201d)",
            "outfile = open(file = \u201cc:\\scores.txt\u201d, \u201cw\u201d)",
            "outfile = open(file = \u201cc:\\\\scores.txt\u201d, \u201cw\u201d)"
        ],
        "answer": "b",
        "explanation": "Explanation: w is used to indicate that file is to be written to."
    },
    {
        "question": "To open a file c:\\scores.txt for appending data, we use ____________",
        "options": [
            "outfile = open(\u201cc:\\\\scores.txt\u201d, \u201ca\u201d)",
            "outfile = open(\u201cc:\\\\scores.txt\u201d, \u201crw\u201d)",
            "outfile = open(file = \u201cc:\\scores.txt\u201d, \u201cw\u201d)",
            "outfile = open(file = \u201cc:\\\\scores.txt\u201d, \u201cw\u201d)"
        ],
        "answer": "a",
        "explanation": "Explanation: a is used to indicate that data is to be appended."
    },
    {
        "question": "Which of the following statements are true?",
        "options": [
            "When you open a file for reading, if the file does not exist, an error occurs",
            "When you open a file for writing, if the file does not exist, a new file is created",
            "When you open a file for writing, if the file exists, the existing file is overwritten with the new file",
            "All of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: The program will throw an error."
    },
    {
        "question": "To read two characters from a file object infile, we use ____________",
        "options": [
            "infile.read(2)",
            "infile.read()",
            "infile.readline()",
            "infile.readlines()"
        ],
        "answer": "a",
        "explanation": "Explanation: Execute in the shell to verify."
    },
    {
        "question": "To read the entire remaining contents of the file as a string from a file object infile, we use ____________",
        "options": [
            "infile.read(2)",
            "infile.read()",
            "infile.readline()",
            "infile.readlines()"
        ],
        "answer": "b",
        "explanation": "Explanation: read function is used to read all the lines in a file."
    },
    {
        "question": "Which are the two built-in functions to read a line of text from standard input, which by default comes from the keyboard?",
        "options": [
            "Raw_input & Input",
            "Input & Scan",
            "Scan & Scanner",
            "Scanner"
        ],
        "answer": "a",
        "explanation": "Explanation: Python provides two built-in functions to read a line of text from standard input, which by default comes from the keyboard. These functions are:\nraw_input and input"
    },
    {
        "question": "Which is/are the basic I/O connections in file?",
        "options": [
            "Standard Input",
            "Standard Output",
            "Standard Errors",
            "All of the mentioned"
        ],
        "answer": "d",
        "explanation": "Explanation: Standard input, standard output and standard error. Standard input is the data that goes to the program. The standard input comes from a keyboard. Standard output is where we print our data with the print keyword. Unless redirected, it is the terminal console. The standard error is a stream where programs write their error messages. It is usually the text terminal."
    },
    {
        "question": "In file handling, what does this terms means \u201cr, a\u201d?",
        "options": [
            "read, append",
            "append, read",
            "write, append",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: r- reading,  a-appending."
    },
    {
        "question": "What is the use of \u201cw\u201d in file handling?",
        "options": [
            "Read",
            "Write",
            "Append",
            "None of the mentioned"
        ],
        "answer": "b",
        "explanation": "Explanation: This opens the file for writing. It will create the file if it doesn\u2019t exist, and if it does, it will overwrite it.\nfh = open(\u201cfilename_here\u201d, \u201cw\u201d)."
    },
    {
        "question": "What is the use of \u201ca\u201d in file handling?",
        "options": [
            "Read",
            "Write",
            "Append",
            "None of the mentioned"
        ],
        "answer": "c",
        "explanation": "Explanation: This opens the fhe file in appending mode. That means, it will be open for writing and everything will be written to the end of the file.\nfh =open(\u201cfilename_here\u201d, \u201ca\u201d)."
    },
    {
        "question": "Which function is used to read all the characters?",
        "options": [
            "Read()",
            "Readcharacters()",
            "Readall()",
            "Readchar()"
        ],
        "answer": "a",
        "explanation": "Explanation: The read function reads all characters fh = open(\u201cfilename\u201d, \u201cr\u201d)\ncontent = fh.read()."
    },
    {
        "question": "Which function is used to read single line from file?",
        "options": [
            "Readline()",
            "Readlines()",
            "Readstatement()",
            "Readfullline()"
        ],
        "answer": "b",
        "explanation": "Explanation: The readline function reads a single line from the file fh = open(\u201cfilename\u201d, \u201cr\u201d)\ncontent = fh.readline()."
    },
    {
        "question": "Which function is used to write all the characters?",
        "options": [
            "write()",
            "writecharacters()",
            "writeall()",
            "writechar()"
        ],
        "answer": "a",
        "explanation": "Explanation: To write a fixed sequence of characters to a file\nfh = open(\u201chello.txt\u201d,\u201dw\u201d)\nwrite(\u201cHello World\u201d)."
    },
    {
        "question": "Which function is used to write a list of string in a file?",
        "options": [
            "writeline()",
            "writelines()",
            "writestatement()",
            "writefullline()"
        ],
        "answer": "a",
        "explanation": "Explanation: With the writeline function you can write a list of strings to a file\nfh = open(\u201chello.txt\u201d, \u201cw\u201d)\nlines_of_text = [\u201ca line of text\u201d, \u201canother line of text\u201d, \u201ca third line\u201d]\nfh.writelines(lines_of_text)."
    },
    {
        "question": "Which function is used to close a file in python?",
        "options": [
            "Close()",
            "Stop()",
            "End()",
            "Closefile()"
        ],
        "answer": "a",
        "explanation": "Explanation: f.close()to close it and free up any system resources taken up by the open file."
    },
    {
        "question": "Is it possible to create a text file in python?",
        "options": [
            "Yes",
            "No",
            "Machine dependent",
            "All of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: Yes we can create a file in python. Creation of file is as shown below.\nfile = open(\u201cnewfile.txt\u201d, \u201cw\u201d)\nfile.write(\u201chello world in the new file\\n\u201d)\nfile.write(\u201cand another line\\n\u201d)\nfile.close()."
    },
    {
        "question": "Which of the following are the modes of both writing and reading in binary format in file?",
        "options": [
            "wb+",
            "w",
            "wb",
            "w+"
        ],
        "answer": "a",
        "explanation": "Explanation: Here is the description below\n\u201cw\u201d  Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.\n\u201cwb\u201d Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.\n\u201cw+\u201d Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.\n\u201cwb+\u201d Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing."
    },
    {
        "question": "Which of the following is not a valid mode to open a file?",
        "options": [
            "ab",
            "rw",
            "r+",
            "w+"
        ],
        "answer": "b",
        "explanation": "Explanation: Use r+, w+ or a+ to perform both read and write operations using a single file object."
    },
    {
        "question": "What is the difference between r+ and w+ modes?",
        "options": [
            "no difference",
            "in r+ the pointer is initially placed at the beginning of the file and the pointer is at the end for w+",
            "in w+ the pointer is initially placed at the beginning of the file and the pointer is at the end for r+",
            "depends on the operating system"
        ],
        "answer": "b",
        "explanation": "Explanation: none."
    },
    {
        "question": "How do you get the name of a file from a file object (fp)?",
        "options": [
            "fp.name",
            "fp.file(name)",
            "self.__name__(fp)",
            "fp.__name__()"
        ],
        "answer": "a",
        "explanation": "Explanation: name is an attribute of the file object."
    },
    {
        "question": "Which of the following is not a valid attribute of a file object (fp)?",
        "options": [
            "fp.name",
            "fp.closed",
            "fp.mode",
            "fp.size"
        ],
        "answer": "d",
        "explanation": "Explanation: fp.size has not been implemented."
    },
    {
        "question": "How do you close a file object (fp)?",
        "options": [
            "close(fp)",
            "fclose(fp)",
            "fp.close()",
            "fp.__close__()"
        ],
        "answer": "c",
        "explanation": "Explanation: close() is a method of the file object."
    },
    {
        "question": "How do you get the current position within the file?",
        "options": [
            "fp.seek()",
            "fp.tell()",
            "fp.loc",
            "fp.pos"
        ],
        "answer": "b",
        "explanation": "Explanation: It gives the current position as an offset from the start of file."
    },
    {
        "question": "How do you rename a file?",
        "options": [
            "fp.name = \u2018new_name.txt\u2019",
            "os.rename(existing_name, new_name)",
            "os.rename(fp, new_name)",
            "os.set_name(existing_name, new_name)"
        ],
        "answer": "b",
        "explanation": "Explanation: os.rename() is used to rename files."
    },
    {
        "question": "How do you delete a file?",
        "options": [
            "del(fp)",
            "fp.delete()",
            "os.remove(\u2018file\u2019)",
            "os.delete(\u2018file\u2019)"
        ],
        "answer": "c",
        "explanation": "Explanation: os.remove() is used to delete files."
    },
    {
        "question": "How do you change the file position to an offset value from the start?",
        "options": [
            "fp.seek(offset, 0)",
            "fp.seek(offset, 1)",
            "fp.seek(offset, 2)",
            "none of the mentioned"
        ],
        "answer": "a",
        "explanation": "Explanation: 0 indicates that the offset is with respect to the start."
    },
    {
        "question": "What happens if no arguments are passed to the seek function?",
        "options": [
            "file position is set to the start of file",
            "file position is set to the end of file",
            "file position remains unchanged",
            "error"
        ],
        "answer": "d",
        "explanation": "Explanation: seek() takes at least one argument."
    },
    {
        "question": "_____ represents an entity in the real world with its identity and behaviour.",
        "options": [
            "A method",
            "An object",
            "A class",
            "An operator"
        ],
        "answer": "b",
        "explanation": "Explanation: An object represents an entity in the real world that can be distinctly identified. A class may define an object."
    },
    {
        "question": "_____  is used to create an object.",
        "options": [
            "class",
            "constructor",
            "User-defined functions",
            "In-built functions"
        ],
        "answer": "b",
        "explanation": "Explanation: The values assigned by the constructor to the class members is used to create the object."
    },
    {
        "question": "The assignment of more than one function to a particular operator is _______",
        "options": [
            "Operator over-assignment",
            "Operator overriding",
            "Operator overloading",
            "Operator instance"
        ],
        "answer": "c",
        "explanation": "Explanation: The assignment of more than one function to a particular operator is called as operator overloading."
    },
    {
        "question": "Which of the following is not a class method?",
        "options": [
            "Non-static",
            "Static",
            "Bounded",
            "Unbounded"
        ],
        "answer": "a",
        "explanation": "Explanation: The three different class methods in Python are static, bounded and unbounded methods."
    },
    {
        "question": "Which of the following best describes inheritance?",
        "options": [
            "Ability of a class to derive members of another class as a part of its own definition",
            "Means of bundling instance variables and methods in order to restrict access to certain class members",
            "Focuses on variables and passing of variables to functions",
            "Allows for implementation of elegant software that is well designed and easily modified"
        ],
        "answer": "a",
        "explanation": "Explanation: If the class definition is class B(A): then class B inherits the methods of class A. This is called inheritance."
    },
    {
        "question": "Which of the following statements is wrong about inheritance?",
        "options": [
            "Protected members of a class can be inherited",
            "The inheriting class is called a subclass",
            "Private members of a class can be inherited and accessed",
            "Inheritance is one of the features of OOP"
        ],
        "answer": "c",
        "explanation": "Explanation: Any changes made to the private members of the class in the subclass aren\u2019t reflected in the original members."
    },
    {
        "question": "Which of the following best describes polymorphism?",
        "options": [
            "Ability of a class to derive members of another class as a part of its own definition",
            "Means of bundling instance variables and methods in order to restrict access to certain class members",
            "Focuses on variables and passing of variables to functions",
            "Allows for objects of different types and behaviour to be treated as the same general type"
        ],
        "answer": "d",
        "explanation": "Explanation: Polymorphism is a feature of object-oriented programming languages. It allows for the implementation of elegant software that is well designed and easily modified."
    },
    {
        "question": "What is the biggest reason for the use of polymorphism?",
        "options": [
            "It allows the programmer to think at a more abstract level",
            "There is less program code to write",
            "The program will have a more elegant design and will be easier to maintain and update",
            "Program code takes up less space"
        ],
        "answer": "c",
        "explanation": "Explanation: Polymorphism allows for the implementation of elegant software."
    },
    {
        "question": "What is the use of duck typing?",
        "options": [
            "More restriction on the type values that can be passed to a given method",
            "No restriction on the type values that can be passed to a given method",
            "Less restriction on the type values that can be passed to a given method",
            "Makes the program code smaller"
        ],
        "answer": "c",
        "explanation": "Explanation: In Python, any set of classes with a common set of methods can be treated similarly. This is called duck typing. Hence duck typing imposes less restrictions."
    },
    {
        "question": "Which of these is not a fundamental features of OOP?",
        "options": [
            "Encapsulation",
            "Inheritance",
            "Instantiation",
            "Polymorphism"
        ],
        "answer": "c",
        "explanation": "Explanation: Instantiation simply refers to creation of an instance of class. It is not a fundamental feature of OOP."
    },
    {
        "question": "Which of the following is the most suitable definition for encapsulation?",
        "options": [
            "Ability of a class to derive members of another class as a part of its own definition",
            "Means of bundling instance variables and methods in order to restrict access to certain class members",
            "Focuses on variables and passing of variables to functions",
            "Allows for implementation of elegant software that is well designed and easily modified"
        ],
        "answer": "b",
        "explanation": "Explanation: The values assigned by the constructor to the class members is used to create the object."
    },
    {
        "question": "How many except statements can a try-except block have?",
        "options": [
            "zero",
            "one",
            "more than one",
            "more than zero"
        ],
        "answer": "d",
        "explanation": "Explanation: There has to be at least one except statement."
    },
    {
        "question": "When will the else part of try-except-else be executed?",
        "options": [
            "always",
            "when an exception occurs",
            "when no exception occurs",
            "when an exception occurs in to except block"
        ],
        "answer": "c",
        "explanation": "Explanation: The else part is executed when no exception occurs."
    }
]